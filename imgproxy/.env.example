# URL signature

# imgproxy allows URLs to be signed with a key and a salt. This feature is disabled by default, but is highly recommended to be enabled in production.
IMGPROXY_KEY=hex-encoded-key
IMGPROXY_SALT=hex-encoded-salt
IMGPROXY_SIGNATURE_SIZE=32

# a list of trusted signatures, comma divided. When set, imgproxy will trust the signatures from the list and won't check them even if IMGPROXY_KEY and IMGPROXY_SALT are set. Default: blank
IMGPROXY_TRUSTED_SIGNATURES=

# NOTE - you can specify multiple key/salt pairs by dividing the keys and salts with a comma (,).
# imgproxy will check URL signatures with each pair. This is useful when you need to change key/salt pairs in your application while incurring zero downtime.


# Server

# the address and port or Unix socket to listen to. Default: :8080
IMGPROXY_BIND=[::]:8080

# the network to use. Known networks are tcp, tcp4, tcp6, unix, and unixpacket. Default: tcp
IMGPROXY_NETWORK=tcp

# the maximum duration (in seconds) for processing the response. Default: 10
IMGPROXY_TIMEOUT=10

# the maximum duration (in seconds) for reading the entire incoming HTTP request, including the body. Default: 10
IMGPROXY_READ_REQUEST_TIMEOUT=10

# the maximum duration (in seconds) for writing the HTTP response body. Default: 10
IMGPROXY_WRITE_RESPONSE_TIMEOUT=10

# the maximum duration (in seconds) to wait for the next request before closing the connection. When set to 0, keep-alive is disabled. Default: 10
IMGPROXY_KEEP_ALIVE_TIMEOUT=10

# the maximum duration (in seconds) to wait for the next request before closing the HTTP client connection. The HTTP client is used to download source images. When set to 0, keep-alive is disabled. Default: 90
IMGPROXY_CLIENT_KEEP_ALIVE_TIMEOUT=90

# the maximum duration (in seconds) for downloading the source image. Default: 5
IMGPROXY_DOWNLOAD_TIMEOUT=5

# (alias: IMGPROXY_CONCURRENCY) the maximum number of images an imgproxy instance can process simultaneously without creating a queue. Default: the number of CPU cores multiplied by two
IMGPROXY_WORKERS=

# the maximum number of image requests that can be put in the queue. Requests that exceed this limit are rejected with 429 HTTP status. When set to 0, the requests queue is unlimited. Default: 0
IMGPROXY_REQUESTS_QUEUE_SIZE=0

# the maximum number of simultaneous active connections. When set to 0, connection limit is disabled. Default: 2048
IMGPROXY_MAX_CLIENTS=2048

# a duration (in seconds) sent via the Cache-Control: max-age HTTP header. Default: 31536000 (1 year)
IMGPROXY_TTL=31536000

# when true and the source image response contains the Expires or Cache-Control headers, reuse those headers. Default: false
IMGPROXY_CACHE_CONTROL_PASSTHROUGH=false

# when true and the source image has an http or https scheme, set a rel="canonical" HTTP header to the value of the source image URL. More details here. Default: false
IMGPROXY_SET_CANONICAL_HEADER=false

# when true, enables SO_REUSEPORT socket option (currently only available on Linux and macOS)
IMGPROXY_SO_REUSEPORT=false

# the URL path prefix. Example: when set to /abc/def, the imgproxy URL will be /abc/def/%signature/%processing_options/%source_url. Default: blank
IMGPROXY_PATH_PREFIX=

# the User-Agent header that will be sent with the source image request. You can use the %current_version variable to insert the current imgproxy version. Default: imgproxy/%current_version
IMGPROXY_USER_AGENT=imgproxy/v3.8.0

# when set to true, enables using the ETag HTTP header for HTTP cache control. Default: false
IMGPROXY_USE_ETAG=false

# change this to change ETags for all the images. Default: blank
IMGPROXY_ETAG_BUSTER=

# when set to true, enables using the Last-Modified HTTP header for HTTP cache control. Default: false
IMGPROXY_USE_LAST_MODIFIED=false

# when set to true, imgproxy will add debug headers to the response. Default: false
IMGPROXY_ENABLE_DEBUG_HEADERS=true
# The following debug headers will be added:
# X-Origin-Content-Length: the size of the source image
# X-Origin-Width: the width of the source image
# X-Origin-Height: the height of the source image
# X-Result-Width: the width of the resultant image
# X-Result-Height: the height of the resultant image


# Security

# the maximum resolution of the source image, in megapixels. Images with larger actual size will be rejected. Default: 50
IMGPROXY_MAX_SRC_RESOLUTION=50

# the maximum size of the source image, in bytes. Images with larger file size will be rejected. When set to 0, file size check is disabled. Default: 0
IMGPROXY_MAX_SRC_FILE_SIZE=0

# the maximum number of animated image frames that may be processed. Default: 1
IMGPROXY_MAX_ANIMATION_FRAMES=1

# the maximum resolution of the animated source image frame, in megapixels. Images with larger actual frame size will be rejected. When set to 0, imgproxy will test the whole animated image resolution against IMGPROXY_MAX_SRC_RESOLUTION summarising all the frames' resolutions. Default: 0
IMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION=0

# the maximum width or height the resultant image can have, in pixels. When any of the dimensions exceeds this value, imgproxy will scale the image down to fit within the specified maximum dimension. When set to 0, this check is disabled. Default: 0
IMGPROXY_MAX_RESULT_DIMENSION=0

# a list of processing options allowed to be used in imgproxy URLs, divided by comma. When blank, all processing options are allowed. Default: blank
# INFO: If you want to allow both full and short names of a processing option, you should specify them both. For example, if you specify only resize, imgproxy will reject URLs with rs as a processing option, and vice versa.
# TIP: imgproxy doesn't check the processing options used in presets. This enables you to allow using a limited set of processing options directly in imgproxy URLs, while having a set of presets for the rest of them.
IMGPROXY_ALLOWED_PROCESSING_OPTIONS=



# a list of info options allowed to be used in imgproxy URLs, divided by comma. When blank, all info options are allowed. Default: blank
# INFO: If you want to allow both full and short names of an info option, you should specify them both. For example, if you specify only dominant_colors, imgproxy will reject URLs with dc as an info option, and vice versa.
# TIP: imgproxy doesn't check the info options used in presets. This enables you to allow using a limited set of info options directly in imgproxy URLs, while having a set of presets for the rest of them.
IMGPROXY_ALLOWED_INFO_OPTIONS=

# the maximum number of chained pipelines that can be specified in the imgproxy URL. When set to 0, this check is disabled. Default: 0
# TIP: imgproxy doesn't check the number of chained pipelines used in presets
IMGPROXY_MAX_CHAINED_PIPELINES=0

# the maximum number of bytes imgproxy will read to recognize SVG files. If imgproxy is unable to recognize your SVG, try increasing this number. Default: 32768 (32KB)
IMGPROXY_MAX_SVG_CHECK_BYTES=32768

# the max number of redirects imgproxy can follow while requesting the source image. When set to 0, no redirects are allowed. Default: 10
IMGPROXY_MAX_REDIRECTS=10

# the authorization token. If specified, the HTTP request should contain the Authorization: Bearer %secret% header.
IMGPROXY_SECRET=

# hex-encoded key used for source URL encryption. Default: blank
# tip: Read more about source URL encryption in the encrypting the source URL guide: https://docs.imgproxy.net/usage/encrypting_source_url
IMGPROXY_SOURCE_URL_ENCRYPTION_KEY=

# when specified, enables CORS headers with the provided origin. CORS headers are disabled by default.
IMGPROXY_ALLOW_ORIGIN=

# a whitelist of source image URL prefixes divided by comma. Wildcards can be included with * to match all characters except /. When blank, imgproxy allows all source image URLs. Example: s3://,https://*.example.com/,local://. Default: blank
# WARNING: Be careful when using this config to limit source URL hosts, and always add a trailing slash after the host.
# Bad: http://example.com
# Good: http://example.com/
# If the trailing slash is absent, http://example.com@baddomain.com would be a permissable URL, however, the request would be made to baddomain.com.
IMGPROXY_ALLOWED_SOURCES=

# when true, allows connecting to loopback IP addresses (127.0.0.1-127.255.255.255 and IPv6 analogues) when requesting source images. Default: false
IMGPROXY_ALLOW_LOOPBACK_SOURCE_ADDRESSES=false

# when true, allows connecting to link-local multicast and unicast IP addresses (224.0.0.1-224.0.0.255, 169.254.0.1-169.254.255.255, and IPv6 analogues) when requesting source images. Default: false
IMGPROXY_ALLOW_LINK_LOCAL_SOURCE_ADDRESSES=false

# when true, allows connecting to private IP addresses (10.0.0.0 - 10.255.255.255, 172.16.0.0 - 172.31.255.255, 192.168.0.0 - 192.168.255.255, and IPv6 analogues) when requesting source images. Default: true
IMGPROXY_ALLOW_PRIVATE_SOURCE_ADDRESSES=true

# when true, disables the limit on the number of PNG chunks. Default: false
# warning: Disabling the limit on the number of PNG chunks can lead to memory exhaustion and DoS attacks.
IMGPROXY_PNG_UNLIMITED=false

# when true, disables the limit on the SVG file size (10MB). Default: false
# warning: Disabling the limit on the SVG file size can lead to memory exhaustion and DoS attacks.
IMGPROXY_SVG_UNLIMITED=false

# when true, imgproxy will remove scripts from SVG images to prevent XSS attacks. Defaut: true
IMGPROXY_SANITIZE_SVG=true

# when true, disables SSL verification, so imgproxy can be used in a development environment with self-signed SSL certificates.
IMGPROXY_IGNORE_SSL_VERIFICATION=true

# when true, imgproxy will respond with detailed error messages. Not recommended for production because some errors may contain stack traces.
IMGPROXY_DEVELOPMENT_ERRORS_MODE=true

# when true, allows usage of security-related processing options such as max_src_resolution, max_src_file_size, max_animation_frames, max_animation_frame_resolution, and max_result_dimension. Default: false
# WARNING: IMGPROXY_ALLOW_SECURITY_OPTIONS allows bypassing your security restrictions. Don't set it to true unless you are completely sure that an attacker can't change your imgproxy URLs.
IMGPROXY_ALLOW_SECURITY_OPTIONS=false


# Cookies - read more from the docs: https://docs.imgproxy.net/configuration/options#cookies

# when true, incoming cookies will be passed through the image request if they are applicable for the image URL. Default: false
IMGPROXY_COOKIE_PASSTHROUGH=false

# when set, assume that cookies have the scope of this URL for an incoming request (instead of using request headers). If the cookies are applicable to the image URL too, they will be passed along in the image request
IMGPROXY_COOKIE_BASE_URL=

# when true, all incoming cookies will be passed through the image request regardless of the image URL. Default: false
# WARNING: Cookies can contain sensitive information. Be careful when using IMGPROXY_COOKIE_PASSTHROUGH_ALL and avoid its usage unless you completely trust the servers imgproxy will send image requests to.
IMGPROXY_COOKIE_PASSTHROUGH_ALL=false


# Compression

# the default quality of the resultant image, percentage. Default: 80
IMGPROXY_QUALITY=80

# default quality of the resulting image per format, separated by commas. Example: jpeg=70,avif=40,webp=60. When a value for the resulting format is not set, the IMGPROXY_QUALITY value is used. Default: webp=79,avif=63,jxl=77
IMGPROXY_FORMAT_QUALITY="webp=79,avif=63,jxl=77"

# when true, enables progressive JPEG compression. Default: false
IMGPROXY_JPEG_PROGRESSIVE=true

# when true, enables interlaced PNG compression. Default: false
IMGPROXY_PNG_INTERLACED=false

# when true, enables PNG quantization. libvips should be built with Quantizr or libimagequant support. Default: false
IMGPROXY_PNG_QUANTIZE=false

# maximum number of quantization palette entries. Should be between 2 and 256. Default: 256
IMGPROXY_PNG_QUANTIZATION_COLORS=256

# controls the CPU effort spent improving compression. The larger the value, the slower the encoding process but the better the compression. The value should be between 1 and 6. Default: 4
IMGPROXY_WEBP_EFFORT=4

# a hint to the encoder about the type of image being compressed.
IMGPROXY_WEBP_PRESET=default
# Supported WEBP preset values are:
# default: (default) a general-purpose preset
# photo: a digital picture, like portrait, inner shot
# picture: an outdoor photograph, with natural lighting
# drawing: a hand or line drawing, with high-contrast details
# icon: a small-sized colorful image
# text: a text image, with large areas of uniform color

# controls the CPU effort spent improving compression. The larger the value, the slower the encoding process but the better the compression. The value should be between 1 and 9. Default: 4
IMGPROXY_JXL_EFFORT=4


# SVG processing

# when true, imgproxy will always rasterize SVG images unless SVG processing is not skipped. Default: false
IMGPROXY_ALWAYS_RASTERIZE_SVG=false


# AVIF/WebP/JPEG XL support detection

# imgproxy can use the Accept HTTP header to detect if the browser supports AVIF, WebP, or JPEG XL and use it as the default format.
# This feature is disabled by default and can be enabled by the following options:

# enables WebP support detection. When the file extension is omitted in the imgproxy URL and browser supports WebP, imgproxy will use it as the resulting format.
IMGPROXY_AUTO_WEBP=false

# enables WebP support detection and enforces WebP usage. If the browser supports WebP, it will be used as resulting format even if another extension is specified in the imgproxy URL.
IMGPROXY_ENFORCE_WEBP=false

# enables AVIF support detection. When the file extension is omitted in the imgproxy URL and browser supports AVIF, imgproxy will use it as the resulting format.
IMGPROXY_AUTO_AVIF=false

# enables AVIF support detection and enforces AVIF usage. If the browser supports AVIF, it will be used as resulting format even if another extension is specified in the imgproxy URL.
IMGPROXY_ENFORCE_AVIF=false

# enables JPEG XL support detection. When the file extension is omitted in the imgproxy URL and browser supports JPEG XL, imgproxy will use it as the resulting format.
IMGPROXY_AUTO_JXL=false

# enables JPEG XL support detection and enforces JPEG XL usage. If the browser supports JPEG XL, it will be used as the resulting format even if another extension is specified in the imgproxy URL.
IMGPROXY_ENFORCE_JXL=false

# INFO: If multiple format detection/enforcement options are enabled, and the browser supports multiple of them, imgproxy will use the format with the highest priority. The priority is as follows (from the highest to the lowest): JPEG XL, AVIF, WebP
# INFO: If both the source and the requested image formats support animation and AVIF detection/enforcement is enabled, AVIF won't be used as AVIF sequence is not supported yet.
# INFO: If both the source and the requested image formats support animation and JPEG XL detection/enforcement is enabled, JPEG XL won't be used as animated JPEG XL is not widely supported by browsers yet.
# TIP: When AVIF/WebP/JPEG XL support detection is enabled, please take care to configure your CDN or caching proxy to take the Accept HTTP header into account while caching.
# WARNING: Headers cannot be signed. This means that an attacker can bypass your CDN cache by changing the Accept HTTP headers. Keep this in mind when configuring your production caching setup.


# Preferred formats - read more from the docs: https://docs.imgproxy.net/configuration/options#preferred-formats

# a list of preferred formats, comma divided. Default: jpeg,png,gif
# INFO: When AVIF/WebP/JPEG XL support detection is enabled and the browser supports AVIF/WebP/JPEG XL, it may be used as the resultant format even if the preferred formats list doesn't contain it.
IMGPROXY_PREFERRED_FORMATS="jpeg,png,gif"


# Skip processing

# a list of formats that imgproxy shouldn't process, comma divided.
# INFO: Processing can only be skipped when the requested format is the same as the source format.
# INFO: Video thumbnail processing can't be skipped.
IMGPROXY_SKIP_PROCESSING_FORMATS=


# Client hints

# enables Client Hints support to determine default width and DPR options. Read more from the docs: https://developer.chrome.com/blog/automating-resource-selection-with-client-hints
# WARNING: Headers cannot be signed. This means that an attacker can bypass your CDN cache by changing the Width or DPR HTTP headers. Keep this in mind when configuring your production caching setup.
IMGPROXY_ENABLE_CLIENT_HINTS=


# Watermark - read more from the docs: https://docs.imgproxy.net/features/watermark

# Base64-encoded image data. You can easily calculate it with `base64 tmp/watermark.png | tr -d '\n'`
IMGPROXY_WATERMARK_DATA=

# the path to the locally stored image
IMGPROXY_WATERMARK_PATH=

# the watermark image URL
IMGPROXY_WATERMARK_URL=

# the watermark's base opacity
IMGPROXY_WATERMARK_OPACITY=


# Fallback image

# Base64-encoded image data. You can easily calculate it with `base64 tmp/fallback.png | tr -d '\n'`
IMGPROXY_FALLBACK_IMAGE_DATA=

# the path to the locally stored image
IMGPROXY_FALLBACK_IMAGE_PATH=

# the fallback image URL
IMGPROXY_FALLBACK_IMAGE_URL=

# the HTTP code for the fallback image response. When set to zero, imgproxy will respond with the usual HTTP code. Default: 200
IMGPROXY_FALLBACK_IMAGE_HTTP_CODE=200

# a duration (in seconds) sent via the `Cache-Control: max-age HTTP` header when a fallback image was used. When blank or 0, the value from `IMGPROXY_TTL` is used.
IMGPROXY_FALLBACK_IMAGE_TTL=


# Presets - read more from the docs: https://docs.imgproxy.net/usage/presets

# a set of processing preset definitions, comma divided. Example: default=resizing_type:fill/enlarge:1,sharp=sharpen:0.7,blurry=blur:2. Default: blank
IMGPROXY_PRESETS=

# a string that will be used as a presets' separator. Default: ,
IMGPROXY_PRESETS_SEPARATOR=,

# when true, enables presets-only mode. Default: false
IMGPROXY_ONLY_PRESETS=false

# when true, enables presets-only mode for the info endpoint. Default: `IMGPROXY_ONLY_PRESETS`
IMGPROXY_INFO_ONLY_PRESETS=


# Image sources

# a string that will be used as a separator between non-HTTP(S) source URLs' paths and their query strings. When blank, imgproxy won't extract query string from non-HTTP(S) source URLs. Default: ?
# TIP: If filenames in your S3/Google Cloud Storage/local filesystem/etc may contain ?, you may want to set IMGPROXY_SOURCE_URL_QUERY_SEPARATOR to another string that is not used in filenames or set it to blank to disable query string extraction.
IMGPROXY_SOURCE_URL_QUERY_SEPARATOR=?


# Local files - read more from the serving local files guide: https://docs.imgproxy.net/image_sources/local_files

# the root of the local filesystem. Keep this empty to disable local file serving.
IMGPROXY_LOCAL_FILESYSTEM_ROOT=


# Amazon S3 - read more from the serving files from S3 guide: https://docs.imgproxy.net/image_sources/amazon_s3

IMGPROXY_USE_S3=false
IMGPROXY_S3_REGION=
IMGPROXY_S3_ENDPOINT=
IMGPROXY_S3_ENDPOINT_USE_PATH_STYLE=true
IMGPROXY_S3_USE_DECRYPTION_CLIENT=false
IMGPROXY_S3_ASSUME_ROLE_ARN=
IMGPROXY_S3_ASSUME_ROLE_EXTERNAL_ID=


# Google cloud storage - read more from the serving files from Google cloud storage guide: https://docs.imgproxy.net/image_sources/google_cloud_storage

IMGPROXY_USE_GCS=false
IMGPROXY_GCS_KEY=
IMGPROXY_GCS_ENDPOINT=


# Azure blob storage - read more from the serving files from Azure blog storage guide: https://docs.imgproxy.net/image_sources/azure_blob_storage

IMGPROXY_USE_ABS=false
IMGPROXY_ABS_NAME=
IMGPROXY_ABS_KEY=
IMGPROXY_ABS_ENDPOINT=


# OpenStack Object Storage ("Swift") - read more from the serving files from OpenStack object storage guide: https://docs.imgproxy.net/image_sources/openstack_swift

IMGPROXY_USE_SWIFT=false
IMGPROXY_SWIFT_USERNAME=
IMGPROXY_SWIFT_API_KEY=
IMGPROXY_SWIFT_AUTH_URL=
IMGPROXY_SWIFT_AUTH_VERSION=
IMGPROXY_SWIFT_TENANT=
IMGPROXY_SWIFT_DOMAIN=
IMGRPOXY_SWIFT_TIMEOUT_SECONDS=
IMGRPOXY_SWIFT_CONNECT_TIMEOUT_SECONDS=


# Source image URLs

# a base URL prefix that will be added to each source image URL.
# For example, if the base URL is http://example.com/images and /path/to/image.png is requested, imgproxy will download the source image from http://example.com/images/path/to/image.png.
# If the image URL already contains the prefix, it won't be added. Default: blank
IMGPROXY_BASE_URL=

# a list of pattern=replacement pairs, semicolon (;) divided.
# imgproxy will replace source URL prefixes matching the pattern with the corresponding replacement.
# Wildcards can be included in patterns with * to match all characters except /. ${N} in replacement strings will be replaced with wildcard values, where N is the number of the wildcard.
# Examples:
# mys3://=s3://my_bucket/images/ will replace mys3://image01.jpg with s3://my_bucket/images/image01.jpg
# mys3://*/=s3://my_bucket/${1}/images will replace mys3://items/image01.jpg with s3://my_bucket/items/images/image01.jpg
# INFO: Replacements defined in IMGPROXY_URL_REPLACEMENTS are applied before IMGPROXY_BASE_URL is added.
IMGPROXY_URL_REPLACEMENTS=

# when true and the source image URL is Base64-encoded or encrypted, imgproxy will treat the part after the last slash (/) as an SEO-friendly filename and will discard it when decoding the URL. Default: false
# TIP: For example, if you have `IMGPROXY_BASE64_URL_INCLUDES_FILENAME` enabled and want to add a `puppy.jpg` filename to your imgproxy URL for SEO reasons, the URL will look like this:
# `https://my-imgproxy.dev/.../aHR0cDovL2V4YW1wbGUuY29tL3B1cHB5LmpwZw/puppy.jpg`
# imgproxy will treat `puppy.jpg` as an SEO-friendly filename and will use `aHR0cDovL2V4YW1wbGUuY29tL3B1cHB5LmpwZw` as a Base64-encoded source URL.
IMGPROXY_BASE64_URL_INCLUDES_FILENAME=false


# Metrics

# New Relic - read more from the New Relic guide: https://docs.imgproxy.net/monitoring/new_relic

IMGPROXY_NEW_RELIC_KEY=
IMGPROXY_NEW_RELIC_APP_NAME=imgproxy
IMGPROXY_NEW_RELIC_LABELS=


# Prometheus - read more from the Prometheus guide: https://docs.imgproxy.net/monitoring/prometheus

IMGPROXY_PROMETHEUS_BIND=
IMGPROXY_PROMETHEUS_NAMESPACE=


# Datadog - read more from the Datadog guide: https://docs.imgproxy.net/monitoring/datadog
# WARNING: Since the additional metrics are treated by Datadog as custom, Datadog can additionally bill you for their usage. Please, check out Datadog's Custom Metrics Billing page for additional details.

IMGPROXY_DATADOG_ENABLE=
IMGPROXY_DATADOG_ENABLE_ADDITIONAL_METRICS=


# OpenTelemetry - read more from the OpenTelemetry guide: https://docs.imgproxy.net/monitoring/open_telemetry

IMGPROXY_OPEN_TELEMETRY_ENABLE=
IMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS=
IMGPROXY_OPEN_TELEMETRY_SERVER_CERT=
IMGPROXY_OPEN_TELEMETRY_CLIENT_CERT=
IMGPROXY_OPEN_TELEMETRY_CLIENT_KEY=
IMGPROXY_OPEN_TELEMETRY_TRACE_ID_GENERATOR=xray


# Amazon CloudWatch Metrics - read more from the CloudWatch guide: https://docs.imgproxy.net/monitoring/cloud_watch

IMGPROXY_CLOUD_WATCH_SERVICE_NAME=
IMGPROXY_CLOUD_WATCH_NAMESPACE=
IMGPROXY_CLOUD_WATCH_REGION=


# Error Reporting

IMGPROXY_REPORT_DOWNLOADING_ERRORS=true

# Bugsnag
IMGPROXY_BUGSNAG_KEY=
IMGPROXY_BUGSNAG_STAGE=

# Honeybadger
IMGPROXY_HONEYBADGER_KEY=
IMGPROXY_HONEYBADGER_ENV=

# Sentry
IMGPROXY_SENTRY_DSN=
IMGPROXY_SENTRY_ENVIRONMENT=
IMGPROXY_SENTRY_RELEASE=

# Airbrake
IMGPROXY_AIRBRAKE_PROJECT_ID=
IMGPROXY_AIRBRAKE_PROJECT_KEY=
IMGPROXY_AIRBRAKE_ENVIRONMENT=


# Log

# the log format. The following formats are supported:
# pretty: (default) colored human-readable format
# structured: machine-readable format
# json: JSON format
# gcp: Google Cloud Logging agent compliant format
IMGPROXY_LOG_FORMAT=pretty

# the log level. Options are error, warn, info and debug. Default: info
IMGPROXY_LOG_LEVEL=info

# when true, enables sending logs to syslog.
IMGPROXY_SYSLOG_ENABLE=false

# the maximum log level to send to syslog. Known levels are: crit, error, warning and info. Default: info
IMGPROXY_SYSLOG_LEVEL=info

# the network that will be used to connect to syslog. When blank, the local syslog server will be used. Known networks are tcp, tcp4, tcp6, udp, udp4, udp6, ip, ip4, ip6, unix, unixgram and unixpacket. Default: blank
IMGPROXY_SYSLOG_NETWORK=

# the address of the syslog service. Not used if IMGPROXY_SYSLOG_NETWORK is blank. Default: blank
IMGPROXY_SYSLOG_ADDRESS=

# the specific syslog tag. Default: imgproxy
# INFO: imgproxy always uses structured log format for syslog.
IMGPROXY_SYSLOG_TAG=imgproxy


# Memory usage tweaks - DANGER We highly recommended reading the memory usage tweaks guide before changing these settings: https://docs.imgproxy.net/memory_usage_tweaks

IMGPROXY_DOWNLOAD_BUFFER_SIZE=0
IMGPROXY_FREE_MEMORY_INTERVAL=10
IMGPROXY_BUFFER_POOL_CALIBRATION_THRESHOLD=1024

# (Docker only) malloc implementation to use. The following implementations are supported:
# malloc: standard malloc implementation
# jemalloc: https://jemalloc.net/
# tcmalloc: https://github.com/google/tcmalloc
IMGPROXY_MALLOC=malloc


# Miscellaneous

# a string that will be used as a processing/info options arguments' separator. Default: :
IMGPROXY_ARGUMENTS_SEPARATOR=:

# when true, imgproxy will process images in linear colorspace. This will slow down processing. Note that images won't be fully processed in linear colorspace while shrink-on-load is enabled (see below).
IMGPROXY_USE_LINEAR_COLORSPACE=

# when true, disables shrink-on-load for JPEGs and WebP files. Allows processing the entire image in linear colorspace but dramatically slows down resizing and increases memory usage when working with large images.
IMGPROXY_DISABLE_SHRINK_ON_LOAD=

# when true, imgproxy will strip the output images' metadata (EXIF, IPTC, etc.). Default: true
IMGPROXY_STRIP_METADATA=true

# when true, imgproxy will not remove copyright info while stripping metadata. Default: true
IMGPROXY_KEEP_COPYRIGHT=true

# when true, imgproxy will transform the embedded color profile (ICC) to sRGB and remove it from the image. Otherwise, imgproxy will try to keep it as is. Default: true
IMGPROXY_STRIP_COLOR_PROFILE=true

# when true, imgproxy will automatically rotate images based on the EXIF Orientation parameter (if available in the image meta data). The orientation tag will be removed from the image in all cases. Default: true
IMGPROXY_AUTO_ROTATE=true

# when true and the source image has an embedded thumbnail, imgproxy will always use the embedded thumbnail instead of the main image. Currently, only thumbnails embedded in heic and avif are supported. Default: false
IMGPROXY_ENFORCE_THUMBNAIL=false

# when true, response header `Content-Disposition` will include `attachment`. Default: false
IMGPROXY_RETURN_ATTACHMENT=false

# an additional path of the health check. Default: blank
IMGPROXY_HEALTH_CHECK_PATH=